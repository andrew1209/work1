package jvm;
import lombok.SneakyThrows;
import java.io.*;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class TestAddUrl extends ClassLoader{
    @SneakyThrows
    @Override
    protected Class<?> findClass(String name) throws ClassNotFoundException {
        File file = new File("D:\\BaiduNetdiskDownload\\Hello.xlass");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        byte[] bytes = new byte[1024];
        try {
            InputStream inputStream = new FileInputStream(file);
            int i;
            while((i = inputStream.read())!=-1){
                int j = 0;
                i= 255-i;
                byteArrayOutputStream.write(i);
            }
             bytes = byteArrayOutputStream.toByteArray();
        }catch (Exception e){
            e.printStackTrace();
        }
      return defineClass(name,bytes,0,bytes.length);
    }

    public static void main(String[] args) throws IOException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, InstantiationException {
        Object obj = new TestAddUrl().findClass("Hello").newInstance();
        Method method = obj.getClass().getMethod("hello");
        method.invoke(obj);
    }

}